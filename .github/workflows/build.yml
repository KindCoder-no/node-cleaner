name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Add permissions needed for creating releases
permissions:
  contents: write
  packages: write

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci
        
      # Set version from tag if this is a tag push
      - name: Update version from tag if needed
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          # Extract version from tag (remove 'v' prefix)
          $version = $env:GITHUB_REF_NAME -replace '^v', ''
          # Update package.json version
          npm version $version --no-git-tag-version
        shell: pwsh

      - name: Build Windows app
        run: npm run dist:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEBUG: electron-builder

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-builds
          path: |
            release-builds/*.exe
            release-builds/*.msi
            release-builds/*.nsis.zip
          # Exclude blockmap files which cause issues on upload
          exclude: |
            **/*.blockmap
  
  build-macos:
    runs-on: macos-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci
        
      # Set version from tag if this is a tag push
      - name: Update version from tag if needed
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          # Extract version from tag (remove 'v' prefix)
          VERSION=${GITHUB_REF_NAME#v}
          # Update package.json version
          npm version $VERSION --no-git-tag-version
        shell: bash

      - name: Build macOS app
        run: npm run dist:mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEBUG: electron-builder

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-builds
          path: |
            release-builds/*.dmg
            release-builds/*.zip
          # Exclude blockmap files which cause issues on upload
          exclude: |
            **/*.blockmap

  # Optional: Create a GitHub release when a tag is pushed
  release:
    needs: [build-windows, build-macos]
    # Only run this job when a tag is pushed, not for normal commits to main
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
        
      - name: Display structure of downloaded files
        run: ls -R artifacts/
        shell: bash
        
      # Try another release creation method
      - name: Create Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
          
      # List all files in artifacts to help debugging
      - name: List all artifact files
        run: |
          find ./artifacts -type f | sort
        shell: bash
        
      # Extract version from tag (remove 'v' prefix)
      - name: Extract version from tag
        id: extract_version
        run: echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT
        shell: bash
        
      # Use a script to upload all artifacts more dynamically
      - name: Upload release artifacts
        run: |
          VERSION="${{ steps.extract_version.outputs.VERSION }}"
          echo "Starting uploads for version $VERSION"
          
          # Function to upload asset
          upload_asset() {
            local filepath="$1"
            local assetname="$2"
            local contenttype="$3"
            
            echo "Uploading $filepath as $assetname ($contenttype)"
            
            # URL encode the asset name
            local encoded_name=$(echo "$assetname" | sed 's/ /%20/g')
            
            # Check if asset already exists
            local asset_exists=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets" | 
              grep -c "\"name\":\"$assetname\"")
            
            if [[ "$asset_exists" -gt 0 ]]; then
              echo "Asset $assetname already exists in the release, skipping upload"
              return 0
            fi
            
            # Perform the upload
            curl \
              -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: $contenttype" \
              -H "Accept: application/vnd.github.v3+json" \
              --data-binary @"$filepath" \
              "${{ steps.create_release.outputs.upload_url }}?name=$encoded_name" \
              --fail || echo "Failed to upload $assetname, continuing..."
          }
          
          # Look for Windows assets
          for file in $(find ./artifacts/windows-builds -type f | grep -v "\.blockmap$"); do
            filename=$(basename "$file")
            # Process based on file extension
            if [[ "$filename" == *.exe ]]; then
              upload_asset "$file" "Node-Modules-Cleaner-${VERSION}-Setup.exe" "application/vnd.microsoft.portable-executable"
            elif [[ "$filename" == *.msi ]]; then
              upload_asset "$file" "Node-Modules-Cleaner-${VERSION}.msi" "application/x-msi"
            elif [[ "$filename" == *.zip && "$filename" != *.blockmap ]]; then
              upload_asset "$file" "Node-Modules-Cleaner-${VERSION}-windows.zip" "application/zip"
            fi
          done
          
          # Look for macOS assets
          for file in $(find ./artifacts/macos-builds -type f | grep -v "\.blockmap$"); do
            filename=$(basename "$file")
            # Process based on file extension
            if [[ "$filename" == *.dmg ]]; then
              # Check if it's arm64
              if [[ "$filename" == *-arm64.dmg ]]; then
                upload_asset "$file" "Node-Modules-Cleaner-${VERSION}-arm64.dmg" "application/x-apple-diskimage"
              else
                upload_asset "$file" "Node-Modules-Cleaner-${VERSION}.dmg" "application/x-apple-diskimage"
              fi
            elif [[ "$filename" == *.zip ]]; then
              # Check if it's arm64
              if [[ "$filename" == *-arm64-mac.zip ]]; then
                upload_asset "$file" "Node-Modules-Cleaner-${VERSION}-arm64-mac.zip" "application/zip"
              else
                upload_asset "$file" "Node-Modules-Cleaner-${VERSION}-mac.zip" "application/zip"
              fi
            fi
          done
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
