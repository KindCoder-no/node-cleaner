name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Add permissions needed for creating releases
permissions:
  contents: write
  packages: write

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Build Windows app
        run: npm run dist:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEBUG: electron-builder

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-builds
          path: |
            release-builds/*.exe
            release-builds/*.msi
            release-builds/*.nsis.zip
          # Exclude blockmap files which cause issues on upload
          exclude: |
            **/*.blockmap
  
  build-macos:
    runs-on: macos-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Build macOS app
        run: npm run dist:mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEBUG: electron-builder

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-builds
          path: |
            release-builds/*.dmg
            release-builds/*.zip
          # Exclude blockmap files which cause issues on upload
          exclude: |
            **/*.blockmap

  # Optional: Create a GitHub release when a tag is pushed
  release:
    needs: [build-windows, build-macos]
    # Only run this job when a tag is pushed, not for normal commits to main
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
        
      - name: Display structure of downloaded files
        run: |
          echo "Contents of artifacts directory:"
          ls -la artifacts/
          echo "Windows builds:"
          find ./artifacts/windows-builds -type f | sort
          echo "macOS builds:"
          find ./artifacts/macos-builds -type f | sort
        shell: bash
        
      # Try another release creation method
      - name: Create Release
        uses: softprops/action-gh-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
          
      # List all files in artifacts to help debugging
      - name: List all artifact files
        run: |
          find ./artifacts -type f | sort
        shell: bash
        
      # Extract version from tag (remove 'v' prefix)
      - name: Extract version from tag
        id: extract_version
        run: echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT
        shell: bash
        
      - name: Install glob (for better file matching)
        run: npm install -g glob
        shell: bash
        
      - name: Find and prepare release assets
        id: find_assets
        run: |
          # Find each type of asset and export as output
          echo "WIN_EXE=$(find ./artifacts/windows-builds -name "*.exe" | head -1)" >> $GITHUB_OUTPUT
          echo "WIN_MSI=$(find ./artifacts/windows-builds -name "*.msi" | head -1)" >> $GITHUB_OUTPUT
          echo "WIN_ZIP=$(find ./artifacts/windows-builds -name "*.zip" | grep -v "blockmap" | head -1)" >> $GITHUB_OUTPUT
          echo "MAC_DMG=$(find ./artifacts/macos-builds -name "*.dmg" | grep -v "arm64" | head -1)" >> $GITHUB_OUTPUT
          echo "MAC_ARM_DMG=$(find ./artifacts/macos-builds -name "*arm64*.dmg" | head -1)" >> $GITHUB_OUTPUT
          echo "MAC_ZIP=$(find ./artifacts/macos-builds -name "*mac.zip" | grep -v "arm64" | head -1)" >> $GITHUB_OUTPUT
          echo "MAC_ARM_ZIP=$(find ./artifacts/macos-builds -name "*arm64*mac.zip" | head -1)" >> $GITHUB_OUTPUT
        shell: bash
        
      # Upload Windows EXE file
      - name: Upload Windows EXE
        if: steps.find_assets.outputs.WIN_EXE != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_assets.outputs.WIN_EXE }}
          asset_name: Node-Modules-Cleaner-${{ steps.extract_version.outputs.VERSION }}-Setup.exe
          asset_content_type: application/vnd.microsoft.portable-executable
        continue-on-error: true
        
      # Upload Windows MSI file
      - name: Upload Windows MSI
        if: steps.find_assets.outputs.WIN_MSI != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_assets.outputs.WIN_MSI }}
          asset_name: Node-Modules-Cleaner-${{ steps.extract_version.outputs.VERSION }}.msi
          asset_content_type: application/x-msi
        continue-on-error: true
        
      # Upload Windows ZIP file
      - name: Upload Windows ZIP
        if: steps.find_assets.outputs.WIN_ZIP != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_assets.outputs.WIN_ZIP }}
          asset_name: Node-Modules-Cleaner-${{ steps.extract_version.outputs.VERSION }}-windows.zip
          asset_content_type: application/zip
        continue-on-error: true
        
      # Upload macOS DMG files
      - name: Upload macOS DMG (Intel)
        if: steps.find_assets.outputs.MAC_DMG != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_assets.outputs.MAC_DMG }}
          asset_name: Node-Modules-Cleaner-${{ steps.extract_version.outputs.VERSION }}.dmg
          asset_content_type: application/x-apple-diskimage
        continue-on-error: true
        
      - name: Upload macOS DMG (ARM64)
        if: steps.find_assets.outputs.MAC_ARM_DMG != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_assets.outputs.MAC_ARM_DMG }}
          asset_name: Node-Modules-Cleaner-${{ steps.extract_version.outputs.VERSION }}-arm64.dmg
          asset_content_type: application/x-apple-diskimage
        continue-on-error: true
        
      # Upload macOS ZIP files
      - name: Upload macOS ZIP (Intel)
        if: steps.find_assets.outputs.MAC_ZIP != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_assets.outputs.MAC_ZIP }}
          asset_name: Node-Modules-Cleaner-${{ steps.extract_version.outputs.VERSION }}-mac.zip
          asset_content_type: application/zip
        continue-on-error: true
        
      - name: Upload macOS ZIP (ARM64)
        if: steps.find_assets.outputs.MAC_ARM_ZIP != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_assets.outputs.MAC_ARM_ZIP }}
          asset_name: Node-Modules-Cleaner-${{ steps.extract_version.outputs.VERSION }}-arm64-mac.zip
          asset_content_type: application/zip
        continue-on-error: true
