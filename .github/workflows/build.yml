name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Add permissions needed for creating releases
permissions:
  contents: write
  packages: write

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Build Windows app
        run: npm run dist:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEBUG: electron-builder

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-builds
          path: |
            release-builds/*.exe
            release-builds/*.msi
            release-builds/*.nsis.zip
  
  build-macos:
    runs-on: macos-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Build macOS app
        run: npm run dist:mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEBUG: electron-builder

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-builds
          path: |
            release-builds/*.dmg
            release-builds/*.zip

  # Optional: Create a GitHub release when a tag is pushed
  release:
    needs: [build-windows, build-macos]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
        
      - name: Display structure of downloaded files
        run: ls -R artifacts/
        shell: bash
        
      # Try another release creation method
      - name: Create Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
          
      # List all files in artifacts to help debugging
      - name: List all artifact files
        run: |
          find ./artifacts -type f | sort
        shell: bash
        
      # Upload Windows EXE
      - name: Upload Windows EXE
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/windows-builds/Node Modules Cleaner Setup.exe
          asset_name: Node-Modules-Cleaner-Setup.exe
          asset_content_type: application/vnd.microsoft.portable-executable
        continue-on-error: true
        
      # Upload Windows MSI
      - name: Upload Windows MSI
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/windows-builds/Node Modules Cleaner.msi
          asset_name: Node-Modules-Cleaner.msi
          asset_content_type: application/x-msi
        continue-on-error: true
        
      # Upload Windows ZIP
      - name: Upload Windows ZIP
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/windows-builds/Node Modules Cleaner-1.0.0.nsis.zip
          asset_name: Node-Modules-Cleaner-1.0.0-windows.zip
          asset_content_type: application/zip
        continue-on-error: true
        
      # Upload macOS DMG
      - name: Upload macOS DMG
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/macos-builds/Node Modules Cleaner-1.0.0.dmg
          asset_name: Node-Modules-Cleaner-1.0.0.dmg
          asset_content_type: application/x-apple-diskimage
        continue-on-error: true
        
      # Upload macOS ZIP
      - name: Upload macOS ZIP
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/macos-builds/Node Modules Cleaner-1.0.0-mac.zip
          asset_name: Node-Modules-Cleaner-1.0.0-mac.zip
          asset_content_type: application/zip
        continue-on-error: true
